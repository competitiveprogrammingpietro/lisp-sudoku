#lang racket
(require rackunit/text-ui)
(require rackunit
         "functional-programming-coursework.rkt")
(define reduce-tests
  (test-suite "reduce-tests"
              (test-case "Reduce a table where there is nothing to do, indentity function expected"
                          (define list-input `(
                                               (1 2 3 4 5 6 7 8 9)
                                               (1 2 3 4 5 6 7 8 9)
                                               (1 2 3 4 5 6 7 8 9)
                                               (1 2 3 4 5 6 7 8 9)
                                               (1 2 3 4 5 6 7 8 9)
                                               (1 2 3 4 5 6 7 8 9)
                                               (1 2 3 4 5 6 7 8 9)
                                               (1 2 3 4 5 6 7 8 9)
                                               (1 2 3 4 5 6 7 8 9)
                                               ))
                          (check-equal? (reduce list-input 2 2 2) list-input))
              
              (test-case "Reduce where a singleton is present at line 1 column 2 with value 2"
                          (define list-input `(
                                               ((1 2) 2 5 (1 2) (1 2) 1 (1 2) (1 2) (1 2))
                                               (1 (1 2) 4 2 5 (1 2) (1 2) (1 2) (1 2))
                                               ((1 2) (1 2) 6 (1 2) (1 2) 4 2 1 (1 2) (1 2) (1 2))
                                               (1 (1 2) 3 4 5 6 7 8 9)
                                               (1 (1 2) 3 4 5 6 7 8 9)
                                               (1 (1 2) 3 4 5 6 7 8 9)
                                               (1 (1 2) 3 4 5 6 7 8 9)
                                               (1 (1 2) 3 4 5 6 7 8 9)
                                               (1 (1 2) 3 4 5 6 7 8 9)
                                               ))
                          (define list-output `(
                                                ((1) 2 5 (1) (1) 1 (1) (1) (1))
                                                (1 (1) 4 2 5 (1 2) (1 2) (1 2) (1 2))
                                                ((1) (1) 6 (1 2) (1 2) 4 2 1 (1 2) (1 2) (1 2))
                                                (1 (1) 3 4 5 6 7 8 9)
                                                (1 (1) 3 4 5 6 7 8 9)
                                                (1 (1) 3 4 5 6 7 8 9)
                                                (1 (1) 3 4 5 6 7 8 9)
                                                (1 (1) 3 4 5 6 7 8 9)
                                                (1 (1) 3 4 5 6 7 8 9)         
                                               ))
                          (check-equal? (reduce list-input 2 1 2) list-output))
              ))

(define is-present-other-set-tests
  (test-suite "is-present-other-set-tests"
              
              (test-case "Check line: another set with the number 3 other than the (6,3) cell is at the same line at (6, 7)"
                (define list-input `(
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (3 4) (1 2) (1 2) (1 2) (3 4) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     )
                  )
                (check-equal? (is-present-other-sets 6 3 3 list-input) #t))
              
              (test-case "Check column: another set with the number 3 other than the (1,3) cell is at the same column at (3, 3)"
                (define list-input `(
                                     ((1 2) (1 2) (3 4) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (3 4) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     
                                     )
                  )
                (check-equal? (is-present-other-sets 1 3 3 list-input) #t))

              (test-case "Box check: another set with the number 3 other than the (1,3) cell is present in the same box at (3, 2)"
                (define list-input `(
                                     ((1 2) (1 2) (3 4) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (3 4) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     )
                            )
                (check-equal? (is-present-other-sets 1 3 3 list-input) #t))
              
              (test-case "Box check: another set with the number 3 other than the (1,3) cell is present but in a different box at (8, 2) (9 6)"

                (define list-input `(
                                     ((1 2) (1 2) (3 4) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (3 4) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
              )
                            )
                (check-equal? (is-present-other-sets 1 3 3 list-input) #f))
              
              (test-case "Box check: another set with the number 3 other than the (1,3) cell is present in the same box at (3, 1) others are in different boxes (8, 2) (9 6)"

                (define list-input `(
                                     ((1 2) (1 2) (3 4) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((3 4) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (3 4) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     )
                            )
                (check-equal? (is-present-other-sets 1 3 3 list-input) #t))
              
              (test-case "The set at (1, 1) is the only one to contains the number 3"
                (define list-input `(
                                     ((3 4) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     ((1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2))
                                     )
                            )

                (check-equal? (is-present-other-sets 1 1 3 list-input) #f))
              
                (test-case "Real scenario test"
                  (define list-input '(((3 4 7 8 9) 2 5 (3 7 8 9) (3 6 8 9) 1 (4 7 8 9) (3 4 7 8) (4 6 7 8))
                                       (1 (3 6 7) 4 2 5 (3 6 7 9) (7 8 9) (3 7 8) (6 7 8))
                                       ((3 5 7 8 9) (3 7) 6 (3 7 8 9) (3 8 9) 4 2 1 (5 7 8))
                                       ((4 7 8 9) 5 (8 9) (1 4 7 8 9) (1 4 8 9) (7 9) 3 2 (6 7 8))
                                       (6 (1 3 4 7) (3 8) (1 3 4 7 8) 2 (3 5 7) (7 8) (5 7 8) 9)
                                       ((2 3 4 9) 8 7 (1 3 4 9) (1 3 4 9) (3 5 9) (9) 6 (5))
                                       ((2 3 4 7) 9 1 5 (3 4 8) (2 3) 6 (3 4 7) (2 4 7))
                                       ((2 4 5) (4 6) (2) (4 9) 7 8 1 (4 5) 3)
                                       ((2 3 4 7) (1 3 4 7) (2 3) 6 (3 4 8) (2 3) 5 9 (2 4 7)))
                                     )
                  (check-equal? (is-present-other-sets 1 1 3 list-input) #f))
                ))

(define find-singleton-set-test
  (test-suite "find-singleton-test"
              (test-case "Return the first singleton, which is the number 1 at 1,2"
                (define list-input `(
                                     (1 (1 2 3 4 5) 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     ))
                (check-equal? (find-singleton-set list-input (make-hash)) `(1 2 1)))

              (test-case "Return the first valid singleton, which is the number 2 at 1,2"
                (define list-input `(
                                     (1 (1 2 3 4 5) 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     ))
                (define ht (make-hash))
                (hash-set! ht "12" `(1))
                (check-equal? (find-singleton-set list-input ht) `(1 2 2)))

              (test-case "Return the first valid singleton, which is the number 8 at 9,2. The hashtable contains several key, value pairs"
                (define list-input `(
                                     (1 (1 2 3 4 5) 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 (1 2 3 4) 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 (8 9) 3 4 5 6 7 8 9)
                                     ))
                (define ht (make-hash))
                (hash-set! ht "12" `(1 2 3 4 5))
                (hash-set! ht "76" `(1 2 3 4))
                (check-equal? (find-singleton-set list-input ht) `(9 2 8)))

              (test-case "Return false, since there are not singleton"
                (define list-input `(
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     ))
                (define ht (make-hash))
                (hash-set! ht "12" `(1))
                (check-equal? (find-singleton-set list-input ht) #f))

              
               ))

(define reduce-set-tests
  (test-suite "reduce-set-tests"
              (test-case "Reduce set at 1,2 to be 2"
                (define list-input `(
                                     (1 (1 2 3 4 5) 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     ))
                (define list-output `(
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     ))
                
                (check-equal? (reduce-set 1 2 2 list-input) list-output)
                )))

(define func-on-coordinate-tests
  (test-suite "func-on-coodinate-tests"
              (test-case "Double element at 3,4"
                (define list-input `(
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     ))
                (define list-output `(
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 8 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     ))
                (define (double line column cell)
                  (if (and (= line 3 ) (= column 4))
                      (* cell 2)
                      cell))
                (check-equal? (func-on-coordinate double list-input 3 4) list-output))
              
              (test-case "Identity function"
                (define list-input `(
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     ))
                (define list-output `(
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     ))
                (define (double line column cell)
                  cell)
                (check-equal? (func-on-coordinate double list-input 3 4) list-output))
              ))


(define second-step-tests
  (test-suite "second-step-tests"
              (test-case "Scan the whole table and return the identity"
                (define list-input `(
                                     (1 (1 2 3 4 5) 3 4 5 6 7 8 9)
                                     (1 (1 2 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     (1 (1 2 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     (1 (1 2 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     (1 (1 2 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     (1 (1 2 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     (1 (1 2 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     (1 (1 2 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     (1 (1 2 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     (1 (1 2 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     ))
                (define list-output `(
                                     (1 (1 2 3 4 5) 3 4 5 6 7 8 9)
                                     (1 (1 2 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     (1 (1 2 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     (1 (1 2 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     (1 (1 2 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     (1 (1 2 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     (1 (1 2 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     (1 (1 2 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     (1 (1 2 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     (1 (1 2 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     ))
               
                
                (check-equal? (second-step list-input (make-hash)) list-output))
              (test-case "Successfully reduce the set at 1,2 to be 2"
                (define list-input `(
                                     (1 (1 2 3 4 5) 3 4 5 6 7 8 9)
                                     (1 (1 3 4 5 6 7 8 9) 2 (1 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     (1 (1 3 4 5 6 7 8 9) 2 (1 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     (1 (1 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     (1 (1 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     (1 (1 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     (1 (1 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     (1 (1 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     (1 (1 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     ))
                (define list-output `(
                                      (1 2 3 4 5 6 7 8 9)
                                      (1 (1 3 4 5 6 7 8 9) 2 (1 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                      (1 (1 3 4 5 6 7 8 9) 2 (1 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                      (1 (1 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                      (1 (1 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                      (1 (1 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                      (1 (1 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                      (1 (1 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                      (1 (1 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                      ))
                (check-equal? (second-step list-input (make-hash)) list-output))

              (test-case "Do not alter the table, there is no set that can be reduced to a sigleton"
                (define list-input `(
                                     (1 (1 2 3 4 5) 3 4 5 6 7 8 9)
                                     (1 (1 3 4 5 6 7 8 9) 2 (1 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     (1 (1 3 4 5 6 7 8 9) 2 (1 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     (1 (1 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     (1 (1 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     (1 (1 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     (1 (1 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     (1 (1 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     (1 (1 2 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                     ))
                (define list-output `(
                                      (1 (1 2 3 4 5) 3 4 5 6 7 8 9)
                                      (1 (1 3 4 5 6 7 8 9) 2 (1 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                      (1 (1 3 4 5 6 7 8 9) 2 (1 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                      (1 (1 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                      (1 (1 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                      (1 (1 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                      (1 (1 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                      (1 (1 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                      (1 (1 2 3 4 5 6 7 8 9) 2 (1 2 3 4 5 6 7 8 9) (1 2 3 4 5 6 7 8 9) 6 7 8 9)
                                      ))
                (check-equal? (second-step list-input (make-hash)) list-output))

              (test-case "The set at 6,4 can be reduced to be 8"
                (define list-input `(
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 (1 2 3 4 8) 5 6 7 8 9)
                                     (1 2 3 (1 2 3 4) 5 6 7 8 9)
                                     (1 2 3 4 5 (1 2 3 4) 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     ))
                (define list-output `(
                                      (1 2 3 4 5 6 7 8 9)
                                      (1 2 3 4 5 6 7 8 9)
                                      (1 2 3 4 5 6 7 8 9)
                                      (1 2 3 4 5 6 7 8 9)
                                      (1 2 3 4 5 6 7 8 9)
                                      (1 2 3 8 5 6 7 8 9)
                                      (1 2 3 (1 2 3 4) 5 6 7 8 9)
                                      (1 2 3 4 5 (1 2 3 4) 7 8 9)
                                      (1 2 3 4 5 6 7 8 9)
                                      ))
                (check-equal? (second-step list-input (make-hash)) list-output))
              
              (test-case "The set at 6,4 can be reduced to be 8"
                (define list-input `(
                                     '(
                                       ((3 7 8 9) 2 5           (3 7 8) (3 6 8 9) 1           (7 8 9) (3 7 8) 4)
                                       (1 (3 7) 4               2 5 (3 6 7 9)                 (7 8 9) (3 7 8) (6 7 8))
                                       ((3 7 8 9) (3 7) 6       (3 7 8) (3 8 9) 4             2 1 (5 7 8))
                                       
                                       (4 5 9                   (1 7 8) (1 6 8) (6 7)         3 2 (1 7 8))
                                       (6 1 3                   4 2 (5 7) (7 8)               (5 7 8) 9)
                                       (2 8 7                   (1 3) (1 3 9) (3 5 9)         4 6 (1 5))
                                       
                                       ((3 7) 9 1               5 (3 4) (2 3)                 6 (7 8) (2 7 8))
                                       (5 6 2                   9 7 8                         1 4 3)
                                       ((3 7) (3 4 7) 8         6 (1 3 4) (2 3)               5 9 (2 7))
                                     )))
                (define list-output `(
                                  '(
                                    ((3 7 8 9) 2 5           (3 7 8) (3 6 8 9) 1           (7 8 9) (3 7 8) 4)
                                    (1 (3 7) 4               2 5 (3 6 7 9)                 (7 8 9) (3 7 8) (6 7 8))
                                    ((3 7 8 9) (3 7) 6       (3 7 8) (3 8 9) 4             2 1 (5 7 8))
  
                                    (4 5 9                   (1 7 8) (1 6 8) (6 7)         3 2 (1 7 8))
                                    (6 1 3                   4 2 (5 7) (7 8)               (5 7 8) 9)
                                    (2 8 7                   (1 3) (1 3 9) (3 5 9)         4 6 (1 5))
  
                                    ((3 7) 9 1               5 (3 4) (2 3)                 6 (7 8) (2 7 8))
                                    (5 6 2                   9 7 8                         1 4 3)
                                    ((3 7) (3 4 7) 8         6 (1 3 4) (2 3)               5 9 (2 7))
                                    )))
                                  
                (check-equal? (second-step list-input (make-hash)) list-output))


              
              ))


(define solver-termination-condition-tests
  (test-suite "solver-termination-condition-tests"
              (test-case "Table hasn't been solved yet"
                (define list-input `(
                                     (1 (1 2 3 4 5) 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 (1 2 3 4))
                                     ))
                (check-equal? (solver-termination-condition list-input) #f))
              (test-case "Table has been solved"
                (define list-input `(
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     (1 2 3 4 5 6 7 8 9)
                                     ))
                (check-equal? (solver-termination-condition list-input) #t))
              ))
                
;; =================================================================================
;; SECOND TESTS END
;; =================================================================================


;(run-tests reduce-tests)
(run-tests find-singleton-set-test)
;(run-tests is-present-other-set-tests)
;(run-tests reduce-set-tests)
;(run-tests second-step-tests)
;(run-tests func-on-coordinate-tests)
;(run-tests solver-termination-condition-tests)

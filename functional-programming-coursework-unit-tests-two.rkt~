#lang racket
(define reduce-tests
  (test-suite "reduce-tests"
              (test-case "Reduce a table where there is nothing to do, indentity function expected"
                          (define list-input `(
                                               (1 2 3 4 5 6 7 8 9)
                                               (1 2 3 4 5 6 7 8 9)
                                               (1 2 3 4 5 6 7 8 9)
                                               (1 2 3 4 5 6 7 8 9)
                                               (1 2 3 4 5 6 7 8 9)
                                               (1 2 3 4 5 6 7 8 9)
                                               (1 2 3 4 5 6 7 8 9)
                                               (1 2 3 4 5 6 7 8 9)
                                               (1 2 3 4 5 6 7 8 9)
                                               ))
                          (check-equal? (reduce list-input 2 2 2) list-input))


              (test-case "Reduce where a singleton is present at line 1 column 2 with value 2"
                          (define list-input `(
                                               ((1 2) 2 5 (1 2) (1 2) 1 (1 2) (1 2) (1 2))
                                               (1 (1 2) 4 2 5 (1 2) (1 2) (1 2) (1 2))
                                               ((1 2) (1 2) 6 (1 2) (1 2) 4 2 1 (1 2) (1 2) (1 2))
                                               (1 (1 2) 3 4 5 6 7 8 9)
                                               (1 (1 2) 3 4 5 6 7 8 9)
                                               (1 (1 2) 3 4 5 6 7 8 9)
                                               (1 (1 2) 3 4 5 6 7 8 9)
                                               (1 (1 2) 3 4 5 6 7 8 9)
                                               (1 (1 2) 3 4 5 6 7 8 9)
                                               ))

                          (define list-output `(
                                                ((1) 2 5 (1) (1) 1 (1) (1) (1))
                                                (1 (1) 4 2 5 (1 2) (1 2) (1 2) (1 2))
                                                ((1) (1) 6 (1 2) (1 2) 4 2 1 (1 2) (1 2) (1 2))
                                                (1 (1) 3 4 5 6 7 8 9)
                                                (1 (1) 3 4 5 6 7 8 9)
                                                (1 (1) 3 4 5 6 7 8 9)
                                                (1 (1) 3 4 5 6 7 8 9)
                                                (1 (1) 3 4 5 6 7 8 9)
                                                (1 (1) 3 4 5 6 7 8 9)         
                                               ))
                          (check-equal? (reduce list-input 2 1 2) list-output))
              ))
(run-tests reduce-tests)